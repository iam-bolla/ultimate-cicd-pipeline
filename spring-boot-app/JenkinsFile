pipeline {
    agent {
        docker {
            image 'maven:3.9.6-eclipse-temurin-17' // Java 17 + Maven
            args '-u 1000:1000 -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    stages {
        stage('Checkout') {
            steps {
                deleteDir() // ensures workspace is empty
                checkout([$class: 'GitSCM',
                          branches: [[name: '*/main']],
                          doGenerateSubmoduleConfigurations: false,
                          extensions: [[$class: 'WipeWorkspace']], // FORCE wipe
                          userRemoteConfigs: [[url: 'https://github.com/iam-bolla/ultimate-cicd-pipeline']]])
                sh 'ls -ltr'
            }
        }

        stage('Install Docker CLI') {
            steps {
                sh '''
                    apt-get update
                    apt-get install -y docker.io
                '''
            }
        }

        stage('Build and Test') {
            steps {
                dir('spring-boot-app') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://18.206.246.156:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    dir('spring-boot-app') {
                        sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=$SONAR_URL'
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "sravyabolla/ultimate-cicd:${BUILD_NUMBER}"
            }
            steps {
                dir('spring-boot-app') {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                    script {
                        def dockerImage = docker.image("${DOCKER_IMAGE}")
                        docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                            dockerImage.push()
                        }
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "ultimate-cicd-pipeline"
                GIT_USER_NAME = "iam-bolla"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        rm -rf ${GIT_REPO_NAME}
                        git clone https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git
                        cd ${GIT_REPO_NAME}
                        git config user.email "sravyabolla123@gmail.com"
                        git config user.name "sravya bolla"
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push origin main
                    '''
                }
            }
        }
    }
}

